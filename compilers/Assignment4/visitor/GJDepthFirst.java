//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int varcount=GJNoArguDepthFirst.maxtemp+1;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n,A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         List<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R)l;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
         R _ret= n.node.accept(this,argu);
         System.out.println(_ret );
         System.out.println("NOOP");
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("\nEND");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   int callflag=0;
   public R visit(Procedure n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.print(a+" ");
      System.out.print("[");
      System.out.print(n.f2.accept(this, argu));
      System.out.println("]");
      n.f3.accept(this, argu);
      callflag=1;
      n.f4.accept(this, argu);
      callflag=0;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR ");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
    int exptemp=0;
    int exptempprint=1;
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      System.out.println(" CJUMP TEMP "+a.toString()+" "+b.toString());
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      System.out.println(" JUMP "+a.toString()+" ");
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
    int printint=1;
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R x = n.f1.accept(this, argu);
      R c = n.f2.accept(this, argu);
      R y = n.f3.accept(this, argu);
      System.out.println(" HSTORE TEMP "+x.toString()+" "+c.toString()+" TEMP "+y.toString());
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
    int tempprint=1;
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      R c = n.f3.accept(this, argu);
      System.out.println(" HLOAD TEMP "+a+" TEMP "+b+" "+c);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      System.out.println(" MOVE TEMP "+a+" TEMP "+b+" ");
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      System.out.println("PRINT TEMP "+a);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   int tempflag=0;
   public R visit(Exp n, A argu) {
      R _ret=null;
      if(n.f0.which==5)
		tempflag=1;
	  if(n.f0.which==6)
		tempflag=1;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      int flag=callflag;
      callflag=0;
      n.f0.accept(this, argu);
      if(flag==1)
		System.out.println("BEGIN");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R b = n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(flag==1)
		System.out.println("RETURN TEMP "+b+"\nEND");
      return b;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R fpr = n.f3.accept(this, argu);
      String out="";
      if (fpr == null)
          fpr = (R) new LinkedList<R>();
      List<R> l =(List<R>)fpr;
      ListIterator<R> i = l.listIterator();
      while(i.hasNext())
		out+=" TEMP "+i.next()+" ";
	  fpr=(R)out;
      n.f4.accept(this, argu);
      int local=varcount;
      varcount++;
      System.out.println("MOVE TEMP "+local);
      System.out.println("CALL TEMP "+a+"("+fpr+")");
      return (R)(""+local);
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a=n.f1.accept(this, argu);
      int local=varcount;
      varcount++;
      System.out.println("MOVE TEMP "+local);
      System.out.println("HALLOCATE TEMP "+a.toString());
      return (R)(""+local);
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      int local=varcount;
      varcount+=1;
      R a = n.f0.accept(this, argu);
      R b = n.f1.accept(this, argu);
      R c = n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+local);
      System.out.println(a.toString()+" TEMP "+b+" TEMP "+c);
      return (R)(""+local);
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
	  if(n.f0.which==0)
		_ret=(R)" LT ";
	  if(n.f0.which==1)
		_ret=(R)" PLUS ";
	  if(n.f0.which==2)
		_ret=(R)" MINUS ";
	  if(n.f0.which==3)
		_ret=(R)" TIMES ";
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f0.tokenImage;
      if(tempflag==1)
      {
		int local=varcount;
		System.out.println("MOVE TEMP "+local+" "+_ret);
		varcount+=1;
		tempflag=0;
		return (R)(""+local);
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f0.tokenImage;
      if(tempflag==1)
      {
		int local=varcount;
		System.out.println("MOVE TEMP "+local+" "+_ret);
		varcount+=1;
		tempflag=0;
		return (R)(""+local);
      }
      return _ret;
   }

}
