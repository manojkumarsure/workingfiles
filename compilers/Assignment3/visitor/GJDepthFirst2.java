//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
   
   int print;
   int globallabel;
   int globalvarcount=20;
   HashMap<R,R> symboltable=new HashMap<R,R>();
   HashMap<String,String> temptable=new HashMap<String,String>();
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //
   public R check(R x)
	{
		R _ret=null;
		String left=new String();
		left=x.toString();
		classtable z=new classtable();
		z=(classtable)symboltable.get((R)(left.split(":")[0]));
		if(symboltable.get((R)left)==null)
		{
			if(symboltable.get((R)(left.split(":")[0]+":"+left.split(":")[left.split(":").length-1]))!=null)
			{
				left=left.split(":")[0]+":"+left.split(":")[left.split(":").length-1];
			}
			else
			{
				while(z.parentclass!=null)
				{
					z=(classtable)symboltable.get((R)z.parentclass.toString());
					if(symboltable.get(left)==null)
						left=z.classname.toString()+":"+left.split(":")[left.split(":").length-1];
					else
						break;
				}
			}
		}
		variable a=new variable();
		classtable b = new classtable();
		try{
				a=(variable)symboltable.get((R)left);
				return (R)a.type;
			}
			catch(ClassCastException e)
			{
				b=(classtable)symboltable.get((R)left);
				return (R)b.classname;
			}
	}
	public void AssignTemps()
	{
		for(R key:symboltable.keySet())
		{
			try{
				classtable x = (classtable)symboltable.get(key);
				for(String var : x.vars.toString().split(","))
				{
					try{
					temptable.put(x.classname.toString()+":"+var.split(" ")[1],"TEMP "+globalvarcount);
					globalvarcount+=1;
					}
					catch(Exception e2){}
				}
			}
			catch(Exception e1){
			try{
				method x = (method)symboltable.get(key);
				for(String var : x.varlist.toString().split(","))
				{
					try{
					temptable.put(x.scope.toString()+":"+var.split(" ")[1],"TEMP "+globalvarcount);
					globalvarcount+=1;}
					catch(Exception e3){}
				}
			}
			catch(Exception e4){}
			}
		}
	}
	public String getTemp(String scope)
	{
		String temp=new String();
		temp=temptable.get(scope);
		if(temp!=null)
			return temp;
		else
		{
			try
			{
				method x = (method)symboltable.get(scope.split(":")[0]+":"+scope.split(":")[1]);
				int i=1;
				for(String param:x.arglist.toString().split(","))
				{
					if(param.equals(scope.split(":")[2]))
						return "TEMP "+i;
					i+=1;
				}
			}
			catch(Exception e){}
			String varname=scope.split(":")[scope.split(":").length-1];
			String currclass;
			currclass=scope.split(":")[0];
			while(true)
			{
				temp=temptable.get(currclass+":"+varname);
				if(temp!=null)
					return temp;
				currclass=((classtable)symboltable.get((R)currclass)).parentclass.toString();
			}
		}
	}
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      symboltable=(HashMap<R,R>)argu;
      argu=null;
      AssignTemps();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("\nEND");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      argu = (A)(a.toString()+":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      argu = (A)(a.toString()+":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      String str=new String();
      str=argu.toString()+b.toString();
      Integer x=(((method)symboltable.get(str)).arglist.toString().split(",").length+1);
      if(x==2)
		x=1;
      System.out.println(str.split(":")[0]+"_"+str.split(":")[1]+"["+x+"]");
      System.out.println("BEGIN");
      argu=(A)(argu.toString()+b.toString()+":");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      print=1;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.println("\nRETURN ");
      n.f10.accept(this, argu);
      print=0;
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("\nEND");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      System.out.println("MOVE ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      System.out.print(" HSTORE  PLUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.print(" TIMES 4 ");
      n.f2.accept(this, argu);
      System.out.print(" 4 ");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      int label=globallabel;
      globallabel+=2;
      System.out.print(" CJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" L"+(label));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+(label+1));
      n.f5.accept(this, argu);
      System.out.println(" L"+(label));
      System.out.println(" NOOP");
      n.f6.accept(this, argu);
      System.out.println(" L"+(label+1));
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
       int label=globallabel;
      globallabel+=2;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("L"+label);
      System.out.print("CJUMP ");
      n.f2.accept(this, argu);
      System.out.println(" L"+(label+1));
      n.f3.accept(this, argu);
      System.out.println(" NOOP");
      n.f4.accept(this, argu);
      System.out.println(" JUMP L"+label);
      System.out.println(" L"+(label+1));
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("PRINT ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      System.out.println("BEGIN ");
      System.out.print(" RETURN TIMES ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.print("\nEND");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      System.out.print("LT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      System.out.print("PLUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      System.out.print("MINUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      System.out.print("TIMES ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      int varcount=globalvarcount;
      globalvarcount+=1;
      System.out.println("BEGIN ");
      System.out.println("HLOAD TEMP "+varcount+" PLUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("  TIMES 4 ");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(" 4 \nRETURN TEMP "+varcount);
      System.out.println("\nEND");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      int varcount=globalvarcount;
      globalvarcount+=2;
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+varcount );
      n.f0.accept(this, argu);
      System.out.println(" HLOAD TEMP "+(varcount+1)+" TEMP "+varcount+" 0");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" RETURN TEMP "+(varcount+1));
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
    String curr=new String();
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      int varcount=globalvarcount;
      globalvarcount+=3;
      System.out.println("CALL");
      System.out.println("BEGIN MOVE TEMP "+(varcount));
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("HLOAD TEMP "+(varcount+1)+" TEMP "+varcount +" 0");
      R x = n.f2.accept(this, argu);
      int i=0;
      classtable c;
      try
      {
		c=(classtable)symboltable.get((R)check((R)(argu.toString()+a.toString())).toString());
      }
      catch(Exception e)
      {
		try{
		c= (classtable)symboltable.get((R)a.toString());
		}catch(Exception e6)
		{
			c= (classtable)symboltable.get((R)curr);
		}
	  }
      for(String s : c.meths.toString().split(";"))
      {
		if(s.split(":")[0].split(" ")[1].equals(x.toString()))
			break;
		else
			i+=1;
      }
      System.out.println("HLOAD TEMP "+(varcount+2)+" TEMP "+(varcount+1)+" "+4*i);
      System.out.println("RETURN TEMP "+(varcount+2));
      System.out.println("END");
      n.f3.accept(this, argu);
      System.out.println("(TEMP "+varcount+" ");
      n.f4.accept(this, argu);
      System.out.println(")");
      n.f5.accept(this, argu);
      curr = c.meths.toString().split(";")[i].split(" ")[0];
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print(" "+n.f0+" ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("1 ");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("0 ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
	  _ret = (R) n.f0;
	  if(print==1)
	  {
		try{
		System.out.print(" "+getTemp(argu.toString()+_ret.toString())+" ");}
		catch(Exception e)
		{
		}
	  }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" TEMP 0 ");
      return (R)argu.toString().split(":")[0];
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      int varcount=globalvarcount;
      globalvarcount+=2;
      int label=globallabel;
      globallabel+=2;
      System.out.println("BEGIN ");
      System.out.println("MOVE TEMP "+varcount);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("MOVE TEMP "+(varcount+1)+" HALLOCATE TIMES 4 PLUS TEMP "+varcount +" 1");
      System.out.println("HSTORE TEMP "+(varcount+1)+" 0 TEMP "+(varcount));
      System.out.println("L"+(label));
      System.out.println("CJUMP LT 0 TEMP "+(varcount)+" L"+(label+1));
      System.out.println("HSTORE PLUS TEMP "+(varcount+1)+" TIMES 4 TEMP "+varcount+ " 0 0");
      System.out.println("MOVE TEMP "+(varcount)+" MINUS TEMP "+varcount+" 1");
      System.out.println("JUMP L"+label);
      System.out.println("L"+(label+1));
      System.out.println("NOOP");
      System.out.println("RETURN TEMP "+(varcount+1));
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
       int varcount=globalvarcount;
      globalvarcount+=2;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      int totalmeths=((classtable)symboltable.get((R)a.toString())).meths.toString().split(";").length;
      int totalvars=((classtable)symboltable.get((R)a.toString())).vars.toString().split(",").length-1;
      System.out.println("BEGIN");
      System.out.println("MOVE TEMP "+varcount+ " HALLOCATE "+4*(totalmeths));
      System.out.println("MOVE TEMP "+(varcount+1)+" HALLOCATE " + 4*(totalvars+1));
      int i=0;
      for(i=0;i<totalmeths;i++)
      {
		System.out.println("HSTORE TEMP "+varcount+" "+4*i+" "+a.toString()+"_"+((classtable)symboltable.get((R)a.toString())).meths.toString().split(";")[i].split(":")[0].split(" ")[1]);
      }
      System.out.println("HSTORE TEMP "+(varcount+1)+" 0 TEMP "+(varcount));
      System.out.println("RETURN TEMP "+(varcount+1));
      System.out.println("END");
      return a;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      System.out.print("MINUS 1 ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
