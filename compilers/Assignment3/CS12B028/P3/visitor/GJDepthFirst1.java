//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst1<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  int flag = 0;
  int labelcount = 0;
  int tempcount = 400;
  String ans = "";

   HashMap <String,node> hm = new HashMap<String,node>(); 

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      hm = (HashMap<String,node>) argu;
      argu = (A) "";
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN ");      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END ");

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      A oldArgu = argu;
      String a = (String)((String) argu + _ret);
      argu = (A) ((String) argu + _ret + ":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     _ret = n.f1.accept(this, argu);
      String a = (String)((String) argu + _ret);
      A oldArgu = argu;
      argu = (A) ((String) argu + _ret + ":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String a2 = n.f1.accept(this, argu).toString();
      String a = (String)((((String)argu) + a2));
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R typename = n.f1.accept(this, argu);
      R methname = n.f2.accept(this, argu);
      A oldArgu = argu;
      String a = (String)((((String)argu) + methname));
      argu = (A) (((String)argu) + methname + ":");

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      node m = hm.get(a);
      System.out.print(a.split(":")[0]+"_"+a.split(":")[1]);
      if(m.arguement=="")
      System.out.println(" [ 1 ]\n");
      else
      System.out.println(" [ "+(m.arguement.split(",").length+1)+" ]\n");
      System.out.println("BEGIN");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.println("RETURN ");
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("END ");

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu).toString(); 
      return _ret;

   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) { 
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) { // TO DOOOOOOOO
      R _ret=null;
      R gen = n.f0.accept(this, argu);
      String a = (String)((String) argu + gen);

      if(hm.containsKey(a))
      {
             node m = hm.get(a); 
             System.out.println("MOVE TEMP "+m.tempcount);

      }

      else
      {
          a = a.split(":")[0] + ":" +a.split(":")[2];
          node m = hm.get(a);

          System.out.println("HSTORE TEMP 0 "+m.offset);
      }      

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R varname = n.f0.accept(this, argu);
      String a = ((String)argu) + varname;

      if(hm.containsKey(a))
      {
        node m = hm.get(a);
        System.out.println("HSTORE PLUS TEMP "+m.tempcount+" TIMES 4 ");
        n.f2.accept(this, argu);
        System.out.println(" 0");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
      }

      else
      {
        a = a.split(":")[0]+":"+a.split(":")[2];
        node m = hm.get(a);

        int off = m.offset;

        System.out.println("HLOAD TEMP "+tempcount+" TEMP 0 "+m.offset);
        System.out.println("HSTORE PLUS TEMP "+tempcount+" TIMES 4");
        tempcount++;
        n.f2.accept(this, argu);
        System.out.println(" 0");
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
      }

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      int local = labelcount;
      labelcount+=100; 
      System.out.print("CJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("L"+local+" ");
      local++;    
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+local+"\n");
      local++;
      n.f5.accept(this, argu);
      System.out.println("L"+(local-2)+" ");

      n.f6.accept(this, argu);
      System.out.println("L"+(local-1)+" NOOP\n");

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      int local = labelcount;
      labelcount+=100;
      n.f0.accept(this, argu);
      System.out.print("L"+local+" "+"CJUMP ");
      local++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println("L" + local);
      local++;
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+(local-2));
      System.out.println("L"+(local-1)+" NOOP");
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      System.out.println(" PRINT ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      System.out.println(" TIMES ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      System.out.println(" LT ");   
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      System.out.println(" PLUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      System.out.println(" MINUS ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      System.out.println(" TIMES ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      flag = 1;
      R varname = n.f0.accept(this, argu);
    
      String a = ((String)argu) + varname;
      if(hm.containsKey(a))
      {
        System.out.println("BEGIN");
        node m = hm.get(a);
        System.out.println("HLOAD TEMP "+tempcount+" PLUS TEMP "+m.tempcount+" TIMES 4 ");
        tempcount++;
        int x = tempcount;
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        tempcount = x;
        System.out.println(" 0");
        n.f3.accept(this, argu);
        System.out.println("RETURN TEMP "+(tempcount-1)+" END");
        return _ret;
      }

      else
      {
        a = a.split(":")[0]+":" + a.split(":")[2];
        node m = hm.get(a);

        System.out.println("BEGIN");
        System.out.println("HLOAD TEMP "+tempcount+" TEMP 0 "+m.offset);
        tempcount++;
        System.out.println("HLOAD TEMP "+tempcount+" PLUS TEMP "+(tempcount-1)+" TIMES 4");
        tempcount++;
        int x = tempcount;
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        tempcount = x;
        System.out.println(" 0");
        System.out.println("RETURN TEMP "+(tempcount-1)+" END");
        return _ret;
     }
 }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      flag = 1;
      R varname = n.f0.accept(this, argu);
      String a = ((String)argu) + varname;

      if(hm.containsKey(a))
      {
          node m = hm.get(a);
          System.out.println("BEGIN HLOAD TEMP "+tempcount+" MINUS TEMP "+m.tempcount+" 4 0"+ " RETURN TEMP "+tempcount+" END");  
          tempcount++;
      }      

      else
      {
        a = a.split(":")[0]+":"+a.split(":")[2];
        node m = hm.get(a);
        System.out.println("BEGIN");
        System.out.println("HLOAD TEMP " + tempcount + " TEMP 0 " +m.offset);
        tempcount++;
        System.out.println("HLOAD TEMP "+tempcount +" MINUS TEMP "+(tempcount-1)+" 4 0 "+ " RETURN TEMP "+tempcount+" END");
        tempcount++;
      }

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) { // to do
      R _ret=null;
       System.out.println("CALL \n BEGIN");
      int x = tempcount;
      flag=1;
      System.out.println("MOVE TEMP " + tempcount);
      R varname = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R functioname = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String a = ((String)argu) + varname; 
      String b;
      tempcount = x;
      
      tempcount++;
      if(hm.containsKey(varname.toString()) && hm.get(varname.toString()).nn ==2 )
      {
          b = varname.toString();
      }
      else
      {

        if(hm.containsKey(a) &&hm.get(a).nn==0)
        {
              node m = hm.get(a);
              System.out.println("TEMP " + m.tempcount);  
              tempcount++;
              b =  m.type;
        }      

        else
        {
          a = a.split(":")[0]+":"+a.split(":")[2];
          
           
           node m = hm.get(a);
           System.out.println("BEGIN HLOAD TEMP " + (tempcount+100) + " TEMP 0 " +m.offset);
           System.out.println("RETURN TEMP "+(tempcount+100) + " END");
           tempcount++;
           b =  m.type;
        }
      }
      
      String c = b+ ":"+functioname.toString();
      int off = hm.get(c).funcoffset;
      String type = hm.get(c).type;
      System.out.println("MOVE TEMP " + tempcount + " TEMP " + (tempcount-1));
      tempcount++;
      System.out.println("HLOAD TEMP " + tempcount + " TEMP " + (tempcount-1) + " 0");
      tempcount++;
      System.out.println("HLOAD TEMP " + tempcount + " TEMP " + (tempcount-1) + " " + off);
      System.out.println("RETURN TEMP "+ tempcount + " END");
      System.out.println("( TEMP " + (tempcount-2));

      n.f4.accept(this, argu);
      System.out.println(")");

      n.f5.accept(this, argu);
      tempcount++;
      return (R)type;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) { // to do
      R _ret=null;
      R varname = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R varname = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      R gen = n.f0.accept(this, argu);
      if(flag == 0 )
      {
      if(gen != null)
      {
        if(hm.containsKey(gen.toString()) && hm.get(gen.toString()).nn==2)
        {
          return gen;
        }
        String a = (String)((String) argu + gen);
        
        if(hm.containsKey(a) && hm.get(a).nn==0)
        {
             node m = hm.get(a); 
             System.out.println("TEMP "+m.tempcount);

        }

        else
        {
          a = a.split(":")[0] +":" +a.split(":")[2];
          if(hm.containsKey(a)&& hm.get(a).nn==0)
          {
            node m = hm.get(a);
            System.out.println(" BEGIN HLOAD TEMP "+tempcount+" TEMP 0 "+m.offset+" RETURN TEMP " + tempcount + " END");
            tempcount++;
          }
        }
        
      }}
      else
      {
        flag =0;
      }
    

      return gen;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String temp1 = n.f0.toString();
      System.out.println(" " + temp1 + " ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" " + "1" + " ");
      
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" " + "0" + " ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if (argu == null)
        argu = (A) "";
      _ret = (R) n.f0;

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      System.out.println("TEMP 0");
      n.f0.accept(this, argu);
      return (R) argu.toString().split(":")[0];
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("BEGIN ");
      tempcount = tempcount + 200;
      int x = tempcount;
      System.out.println("MOVE TEMP "+tempcount);
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      tempcount = x ;
      tempcount++;

      System.out.println("MOVE TEMP "+tempcount+" HALLOCATE PLUS TIMES TEMP "+(tempcount-1)+" 4 4");   

      tempcount++;
      System.out.println("MOVE TEMP "+tempcount+" 4");
      tempcount++;
      int local = labelcount;
      labelcount+=100;
      System.out.println("L"+local+" CJUMP LT TEMP "+(tempcount-1)+" PLUS TIMES TEMP "+(tempcount-3)+" 4 4 L"+(local+1));
      System.out.println("HSTORE PLUS TEMP "+(tempcount-2)+" TEMP "+(tempcount-1)+" 0 0");
      System.out.println("MOVE TEMP "+(tempcount-1)+" PLUS TEMP "+(tempcount-1)+" 4");
      System.out.println("JUMP L"+local);

      System.out.println("L"+(local+1)+" HSTORE TEMP "+(tempcount-2) +" 0 "+"TEMP "+(tempcount-3));
      System.out.println("RETURN PLUS TEMP "+(tempcount-2)+" 4\n END");

      n.f4.accept(this, argu); 
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) { // to do
      R _ret=null;
      n.f0.accept(this, argu);
      R varname = n.f1.accept(this, argu);
      String a = varname.toString(); 
  
      int size = hm.get(a).offset;
      int funcsize = hm.get(a).funcoffset;
      System.out.println("BEGIN");    
      tempcount = tempcount + 200;
      System.out.println("MOVE TEMP "+ tempcount +" " + funcsize);    
      tempcount++;
      System.out.println("MOVE TEMP "+tempcount+" HALLOCATE TEMP "+(tempcount-1));   
      tempcount++;
      int i;
      for(i=0;i*4<funcsize;i++)
      System.out.println("HSTORE TEMP "+(tempcount-1)+ " " + (i*4) + " " +hm.get(a).strfunc.split(":")[i]);      

      System.out.println("MOVE TEMP "+ tempcount + " " + size);    

      tempcount++;

      System.out.println("MOVE TEMP "+tempcount+" HALLOCATE TEMP "+(tempcount-1));   

      tempcount++;
      System.out.println("MOVE TEMP "+tempcount+" 4");
      tempcount++;
      int local = labelcount;
      labelcount+=100;
      System.out.println("L"+local+" CJUMP LT TEMP "+(tempcount-1)+" TEMP "+(tempcount-3)+" L"+(local+1));
      System.out.println("HSTORE PLUS TEMP "+(tempcount-2)+" TEMP "+(tempcount-1)+" 0 0");
      System.out.println("MOVE TEMP "+(tempcount-1)+" PLUS TEMP "+(tempcount-1)+" 4");
      System.out.println("JUMP L"+local);

      System.out.println("L"+(local+1)+" HSTORE TEMP "+(tempcount-2) +" 0 "+"TEMP "+(tempcount-4)); 
      System.out.println("RETURN TEMP "+(tempcount-2)+"\n END");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      tempcount = tempcount - 200;
      return varname;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MINUS 1");
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      flag =1;
      return _ret;
   }

}
