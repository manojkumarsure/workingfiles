//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   HashMap<R,R> symboltable=new HashMap<R,R>();
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }
   //
   // User-generated visitor methods below
   //
    public void classAssignable(R x,R y)
    {
		if(x.toString().equals(y.toString()))
			return;
		if(symboltable.get((R)x.toString())==null)
		{
			System.out.println("Type error21");
			System.exit(0);
		}
		if(symboltable.get((R)y.toString())==null)
		{
			System.out.println("Type error22");
			System.exit(0);
		}
		classtable a=new classtable();
		classtable b=new classtable();
		a=(classtable)symboltable.get((R)x.toString());
		b=(classtable)symboltable.get((R)y.toString());
		if((a.classname.toString()).equals(b.classname.toString()))
			return;
		R curr = (R)a.parentclass;
		while(curr!=null)
		{
			curr=symboltable.get((R)curr.toString());
			if((((classtable)curr).classname.toString()).equals(b.classname.toString()))
				return;
			curr=(R)((classtable)curr).parentclass;
		}
		System.out.println("Type error23");
		System.exit(0);
    }
	public R check(R x)
	{
		R _ret=null;
		String left=new String();
		left=x.toString();
		classtable z=new classtable();
		z=(classtable)symboltable.get((R)(left.split(":")[0]));
		if(symboltable.get((R)left)==null)
		{
			if(symboltable.get((R)(left.split(":")[0]+":"+left.split(":")[left.split(":").length-1]))!=null)
			{
				left=left.split(":")[0]+":"+left.split(":")[left.split(":").length-1];
			}
			else
			{
				while(z.parentclass!=null)
				{
					z=(classtable)symboltable.get((R)z.parentclass.toString());
					if(symboltable.get(left)==null)
						left=z.classname.toString()+":"+left.split(":")[left.split(":").length-1];
					else
						break;
				}
			}
		}
		variable a=new variable();
		classtable b = new classtable();
		try{
				a=(variable)symboltable.get((R)left);
				return (R)a.type;
			}
			catch(ClassCastException e)
			{
				b=(classtable)symboltable.get((R)left);
				return (R)b.classname;
			}
	}
	R checkfn(R a,String signature)
	{
		R _ret=null;
		classtable b = (classtable)symboltable.get((R)a.toString());
		while(b!=null)
		{
			String s = b.meths.toString();
			if(!s.equals(""))
			{
				for(String s1 : s.split(";"))
				{
					if(signature.equals(s1.split(" ")[1]))
					{
						return (R)s1.split(" ")[0];
					}
					else
					{
						if(s1.split(" ")[1].split(":")[0].equals(signature.split(":")[0]))
						{
							int length=s1.split(" ")[1].split(":")[1].split(",").length;
							int i=0;
							for(String s2 : s1.split(" ")[1].split(":")[1].split(","))
							{
								classAssignable((R)signature.split(":")[1].split(",")[i],(R)s2);
							}
							return (R)s1.split(" ")[0];
						}
					}
				}
			}
			if(b.parentclass==null)
			{
				System.out.println("Type error 1");
				System.exit(0);
			}
			b=(classtable)symboltable.get(b.parentclass);
		}
		return _ret;
	}
   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      symboltable=(HashMap<R,R>)argu;
      argu=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      argu = (A)(a.toString()+":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      argu = (A)(a.toString()+":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      argu=(A)(argu.toString()+b.toString()+":");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      R c = n.f10.accept(this, argu);
      classAssignable(a,c);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(n.f0.which==3)
      {
		if(symboltable.get((R)_ret.toString())==null)
		{
			System.out.println("Type error");
			System.exit(0);
		}
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      R c=check((R)(argu.toString()+a.toString()));
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      //System.out.println(c);
      //System.out.println(b);
      classAssignable(c,b);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      check((R)(argu.toString()+a.toString()));
      n.f1.accept(this, argu);
      R b=n.f2.accept(this, argu);
      if(!b.toString().equals("int"))
      {
		System.out.println("Type error26");
		System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      R c = n.f5.accept(this, argu);
      classAssignable((R)"int",c);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R a = n.f2.accept(this, argu);
      if(!a.toString().equals("boolean"))
      {
		System.out.println("Type error27");
		System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R a =n.f2.accept(this, argu);
      if(!a.toString().equals("boolean"))
      {
		System.out.println("Type error28");
		System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R a = n.f2.accept(this, argu);
      if(!a.toString().equals("int"))
      {
		System.out.println("Type error29");
		System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R c = n.f2.accept(this, argu);
      if(!((a.toString().equals("boolean")) && (c.toString().equals("boolean"))))
      {
		System.out.println("Type error210");
		System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R c = n.f2.accept(this, argu);
      if(!((a.toString().equals("int")) && (c.toString().equals("int"))))
      {
		//System.out.println(a);
		System.out.println("Type error211");
		System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      if(!((a.toString().equals("int")) && (b.toString().equals("int"))))
      {
		System.out.println("Type error212");
		System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      if(!((a.toString().equals("int")) && (b.toString().equals("int"))))
      {
		System.out.println("Type error213");
		System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      if(!((a.toString().equals("int")) && (b.toString().equals("int"))))
      {
		System.out.println("Type error214");
		System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      if(!(b.toString().equals("int") && a.toString().equals("int[]")))
      {
		System.out.println("Type error215");
		System.exit(0);
      }     
      n.f3.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      if(!a.toString().equals("int[]"))
      {
		System.out.println("Type error216");
		System.exit(0);
      }  
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      R c = n.f4.accept(this, argu);
      if(c==null)
		c=(R)"";
      n.f5.accept(this, argu);
      //System.out.println(b.toString()+"***"+c.toString());
      return checkfn(a,(b.toString()+":"+c.toString()));
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
    String expr=new String();
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      expr="";
      R fp = n.f0.accept(this, argu);
      R fpr = n.f1.accept(this, argu);
      String out = "";
      if (fpr == null)
      {
          fpr = (R) new LinkedList<R>();
          //System.out.println("getting null");
      }
      if (fp == null)
          fp = (R) "";
      List<R> l = (List<R>) fpr;
      ListIterator<R> i = l.listIterator();
      while (i.hasNext())
          out += i.next();
      //System.out.println("in--"+fp);
      //System.out.println("inx--"+out);
      return (R) (fp + expr);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
	  _ret=(R)(","+n.f1.accept(this, argu));
	  expr+=_ret.toString();
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      if(n.f0.which==3)
		_ret=check((R)(argu.toString()+_ret.toString()));
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
     if (argu == null)
        argu = (A) "";
      _ret = (R) n.f0;
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String a = argu.toString();
      return (R)a.split(":")[0];
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R r = n.f3.accept(this, argu);
      if(!r.toString().equals("int"))
      {
		System.out.println("Type error217");
		System.exit(0);
      }
      n.f4.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      if(symboltable.get((R)_ret.toString())==null)
      {
		System.out.println("Type error");
		System.exit(0);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)_ret.toString();
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      if(!_ret.toString().equals("boolean"))
      {
		System.out.println("Type error 218");
		System.exit(0);
      }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
