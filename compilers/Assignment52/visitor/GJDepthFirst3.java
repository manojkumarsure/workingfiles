//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   ArrayList<tempvariable> templist = GJDepthFirst.templist;
   HashMap<String,procedure> proclist = GJDepthFirst.defprocs;
   HashMap<tempvariable,Integer> offset = new HashMap<tempvariable,Integer>();
   public int spillcount = GJDepthFirst.spillcount;
   public int spillseencount = 0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

    public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         List<R> l = new LinkedList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            l.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) l;
      }
      else
         return null;
   }
	int ndflag=0;
   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
			ndflag=1;
         R _ret =  n.node.accept(this,argu);
         ndflag = 0;
         return _ret;
         }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }
   
   public tempvariable getTemp(int x)
   {
	for(tempvariable i : templist)
	{
		if(i.ProcedureName.equals(currproc.procname) && i.tempnumber==x )
			return i;
	}
	return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
	procedure currproc;
  public R visit(Goal n, A argu) {
      R _ret=null;
      currproc  = proclist.get("MAIN");
      n.f0.accept(this, argu);
      ArrayList<String> al = new ArrayList<String>();
      for(tempvariable i : templist)
      {
		if(i.ProcedureName.equals("MAIN"))
			al.add(i.Allotreg);
      }
      Set<String> proctemps = new HashSet<String>(al);
      String[] regsused = proctemps.toArray(new String[proctemps.size()]);
      currproc.c = (currproc.a <= 4 ? 0 : currproc.a-4 )+spillcount;
      System.out.println("MAIN["+currproc.a+"]["+currproc.c+"]["+currproc.b+"]");
      n.f1.accept(this, (A)regsused);
      System.out.println("END");
      currproc=null;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      currproc=proclist.get(a.toString());
      ArrayList<String> al = new ArrayList<String>();
      for(tempvariable i : templist)
      {
		if(i.ProcedureName.equals(a.toString()))
			al.add(i.Allotreg);
      }
      Set<String> proctemps = new HashSet<String>(al);
      String[] regsused = proctemps.toArray(new String[proctemps.size()]);
      currproc.c = (currproc.a <= 4 ? 0 : currproc.a-4 )+spillcount+regsused.length;
      System.out.println(a.toString()+"["+currproc.a+"]["+currproc.c+"]["+currproc.b+"]");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)regsused);
      
      currproc=null;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      int t=0;
      if(getTemp(Integer.parseInt(a.toString())).location!=0)
		t=1;
      if(t==1)
		{
			System.out.println("ALOAD v0 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(a.toString())))+currproc.c-spillcount));
		}
      System.out.println("CJUMP "+(t==1?"v0":getTemp(Integer.parseInt(a.toString())).Allotreg)+" "+b);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R b = n.f1.accept(this, argu);
      System.out.println("JUMP "+b);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      R c = n.f3.accept(this, argu);
      int t1=0,t2=0;
      if(getTemp(Integer.parseInt(a.toString())).location!=0)
		t1=1;
	  if(getTemp(Integer.parseInt(c.toString())).location!=0)
		t2=1;
	  if(t1==1)
	   {
			System.out.println("ALOAD v0 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(a.toString())))+currproc.c-spillcount));
	   }
	  if(t2==1)
	   {
			System.out.println("ALOAD v1 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(c.toString())))+currproc.c-spillcount));
	   }
      System.out.println("HSTORE "+(t1==1?"v0":getTemp(Integer.parseInt(a.toString())).Allotreg)+" "+b+" "+(t2==1?"v1":getTemp(Integer.parseInt(c.toString())).Allotreg));
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      R c = n.f3.accept(this, argu);
      int t1=0,t2=0;
      if(getTemp(Integer.parseInt(a.toString())).location!=0)
		t1=1;
	  if(getTemp(Integer.parseInt(b.toString())).location!=0)
		t2=1;
	   if(t2==1)
	   {
			System.out.println("ALOAD v1 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(b.toString())))+currproc.c-spillcount));
	   }
	System.out.println("HLOAD "+(t1==1?"v0":getTemp(Integer.parseInt(a.toString())).Allotreg)+" "+(t2==1? "v1":getTemp(Integer.parseInt(b.toString())).Allotreg)+" "+c);
	  if(t1==1)
	  {
			if(offset.get(getTemp(Integer.parseInt(a.toString()))) == null )
			{
				offset.put(getTemp(Integer.parseInt(a.toString())),spillseencount);
				spillseencount++;
			}
			System.out.println("ASTORE SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(a.toString())))+currproc.c-spillcount)+" v0");  
		}
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      R b = n.f2.accept(this, argu);
      int t=0;
      if(getTemp(Integer.parseInt(a.toString())).location!=0)
		t=1;
      System.out.println("MOVE "+ (t==1 ?"v0" : getTemp(Integer.parseInt(a.toString())).Allotreg)+" "+b);
      if(t==1)
      {
		if(offset.get(getTemp(Integer.parseInt(a.toString()))) == null )
		{
			offset.put(getTemp(Integer.parseInt(a.toString())),spillseencount);
			spillseencount++;
		}
		System.out.println("ASTORE SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(a.toString())))+currproc.c-spillcount)+" v0");  
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R c = n.f1.accept(this, argu);
	  System.out.println("PRINT "+c);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
       _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String[] regsused = (String[])argu;
      int ct = currproc.a <=4 ? 0 : currproc.a - 4;
      for(String s : regsused)
      {
		System.out.println("ASTORE SPILLEDARG "+ct+" "+s );
		ct++;
      }
      for(ct=0;ct<4;ct++)
		for(tempvariable t : templist)
			if(t.tempnumber == ct && t.ProcedureName.equals(currproc.procname))
			{
				int flag=0;
				if(t.location!=0)
					flag=1;
				System.out.println("MOVE "+ (flag==1 ?"v0" : t.Allotreg)+" a"+ct);
				if(flag==1)
				{
					if(offset.get(t) == null )
					{
						offset.put(t,spillseencount);
						spillseencount++;
					}
					System.out.println("ASTORE SPILLEDARG "+(offset.get(t)+currproc.c-spillcount)+" v0");  
				}
			}
	  for(ct=4;ct<currproc.a;ct++)
		for(tempvariable t : templist)
			if(t.tempnumber == ct && t.ProcedureName.equals(currproc.procname))
			{
				System.out.println("ALOAD v1 SPILLEDARG "+(ct-4));
// 				System.out.println("MOVE "+t.Allotreg+" v1");
				int flag=0;
				if(t.location!=0)
					flag=1;
				System.out.println("MOVE "+ (flag==1 ?"v0" : t.Allotreg)+" v1");
				if(flag==1)
				{
					if(offset.get(t) == null )
					{
						offset.put(t,spillseencount);
						spillseencount++;
					}
					System.out.println("ASTORE SPILLEDARG "+(offset.get(t)+currproc.c-spillcount)+" v0");  
				}
			}
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R a = n.f3.accept(this, argu);
      System.out.println("MOVE v0 "+a);
      ct = currproc.a <=4 ? 0 : currproc.a - 4;
      for(String s : regsused)
      {
		System.out.println("ALOAD "+s+" SPILLEDARG "+ct );
		ct++;
      }
      System.out.println("END");
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      String[] regsused = (String[])argu;
      int ct = currproc.a <=4 ? 0 : currproc.a - 4;
      n.f0.accept(this, argu);
      R b = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R a = n.f3.accept(this, argu);
      String out2="";
      if (a == null)
          a = (R) new LinkedList<R>();
      List<R> l2= (List<R>)a;
      ListIterator<R> i2 = l2.listIterator();
//       while(i2.hasNext())
// 		out2+=getTemp(Integer.parseInt(i2.next().toString())).Allotreg+":";
//       int x = n.f3.nodes.size() <= 4 ? n.f3.nodes.size() : 4;
//       for(int i=0;i < x ;i++)
// 		System.out.println("MOVE a"+i +" "+out2.split(":")[i]);
// 	  for(int j=4; j<n.f3.nodes.size() ;j++)
// 		System.out.println("PASSARG "+(j-3)+" "+out2.split(":")[j]);
	  int itercount=0;
	  while(i2.hasNext())
	  {
		int flag=0;
		String s = i2.next().toString();
		if(getTemp(Integer.parseInt(s)).location!=0)
		{
			System.out.println("ALOAD v1 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(s)))+currproc.c-spillcount));
			flag=1;
		}
		System.out.println((itercount<4 ? ("MOVE a"+itercount) : ("PASSARG "+(itercount-3)))+" "+(flag==1?"v1":getTemp(Integer.parseInt(s)).Allotreg));
		itercount++;
	  }
      n.f4.accept(this, argu);
      System.out.println("CALL "+b);
      return (R)"v0";
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R c = n.f1.accept(this, argu);
	   _ret = (R)("HALLOCATE "+c);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
      R b = n.f1.accept(this, argu);
      R c = n.f2.accept(this, argu);
      int flag=0;
      if(offset.get(getTemp(Integer.parseInt(b.toString())))!=null)
		{
			System.out.println("ALOAD v1 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(b.toString())))+currproc.c-spillcount));
			flag=1;
		}
      _ret = (R)(a.toString()+" "+(flag ==1 ? "v1" :getTemp(Integer.parseInt(b.toString())).Allotreg)+" "+c);
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String str="";
      switch(n.f0.which)
      {
		case 0:str="LT";break;
		case 1:str="PLUS";break;
		case 2:str="MINUS";break;
		case 3:str="TIMES";break;
      }
      return (R)str;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      R a = n.f0.accept(this, argu);
		String str="";
		if(n.f0.which==0)
		{
			str=getTemp(Integer.parseInt(a.toString())).Allotreg;
			if(offset.get(getTemp(Integer.parseInt(a.toString())))!=null)
			{
				System.out.println("ALOAD v0 SPILLEDARG "+(offset.get(getTemp(Integer.parseInt(a.toString())))+currproc.c-spillcount));
				return (R)"v0";
			}
		}
		else
			str=a.toString();
		return (R)str;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R a = n.f1.accept(this, argu);
      return (R)a.toString();
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
	  n.f0.accept(this, argu);
      return (R)n.f0.tokenImage;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(ndflag==1)
      {
		System.out.println(n.f0.tokenImage);
		System.out.println("NOOP");
      }
      return (R)n.f0.tokenImage;
   }

}
